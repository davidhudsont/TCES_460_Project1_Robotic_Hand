// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hand.proto

#ifndef PROTOBUF_Hand_2eproto_INCLUDED
#define PROTOBUF_Hand_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Hand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHand_ServerImpl();
void InitDefaultsHand_Server();
void InitDefaultsGlove_ClientImpl();
void InitDefaultsGlove_Client();
inline void InitDefaults() {
  InitDefaultsHand_Server();
  InitDefaultsGlove_Client();
}
}  // namespace protobuf_Hand_2eproto
namespace demo {
class Glove_Client;
class Glove_ClientDefaultTypeInternal;
extern Glove_ClientDefaultTypeInternal _Glove_Client_default_instance_;
class Hand_Server;
class Hand_ServerDefaultTypeInternal;
extern Hand_ServerDefaultTypeInternal _Hand_Server_default_instance_;
}  // namespace demo
namespace google {
namespace protobuf {
template<> ::demo::Glove_Client* Arena::Create< ::demo::Glove_Client>(Arena*);
template<> ::demo::Hand_Server* Arena::Create< ::demo::Hand_Server>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace demo {

// ===================================================================

class Hand_Server : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.Hand_Server) */ {
 public:
  Hand_Server();
  virtual ~Hand_Server();

  Hand_Server(const Hand_Server& from);

  inline Hand_Server& operator=(const Hand_Server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hand_Server(Hand_Server&& from) noexcept
    : Hand_Server() {
    *this = ::std::move(from);
  }

  inline Hand_Server& operator=(Hand_Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hand_Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hand_Server* internal_default_instance() {
    return reinterpret_cast<const Hand_Server*>(
               &_Hand_Server_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Hand_Server* other);
  friend void swap(Hand_Server& a, Hand_Server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hand_Server* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Hand_Server>(NULL);
  }

  Hand_Server* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Hand_Server>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Hand_Server& from);
  void MergeFrom(const Hand_Server& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Hand_Server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pressure = 1 [packed = true];
  int pressure_size() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 1;
  ::google::protobuf::int32 pressure(int index) const;
  void set_pressure(int index, ::google::protobuf::int32 value);
  void add_pressure(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pressure() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pressure();

  // @@protoc_insertion_point(class_scope:demo.Hand_Server)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pressure_;
  mutable int _pressure_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_Hand_2eproto::TableStruct;
  friend void ::protobuf_Hand_2eproto::InitDefaultsHand_ServerImpl();
};
// -------------------------------------------------------------------

class Glove_Client : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.Glove_Client) */ {
 public:
  Glove_Client();
  virtual ~Glove_Client();

  Glove_Client(const Glove_Client& from);

  inline Glove_Client& operator=(const Glove_Client& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Glove_Client(Glove_Client&& from) noexcept
    : Glove_Client() {
    *this = ::std::move(from);
  }

  inline Glove_Client& operator=(Glove_Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Glove_Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Glove_Client* internal_default_instance() {
    return reinterpret_cast<const Glove_Client*>(
               &_Glove_Client_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Glove_Client* other);
  friend void swap(Glove_Client& a, Glove_Client& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Glove_Client* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Glove_Client>(NULL);
  }

  Glove_Client* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Glove_Client>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Glove_Client& from);
  void MergeFrom(const Glove_Client& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Glove_Client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 finger = 1 [packed = true];
  int finger_size() const;
  void clear_finger();
  static const int kFingerFieldNumber = 1;
  ::google::protobuf::int32 finger(int index) const;
  void set_finger(int index, ::google::protobuf::int32 value);
  void add_finger(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finger() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finger();

  // repeated int32 wrist = 2 [packed = true];
  int wrist_size() const;
  void clear_wrist();
  static const int kWristFieldNumber = 2;
  ::google::protobuf::int32 wrist(int index) const;
  void set_wrist(int index, ::google::protobuf::int32 value);
  void add_wrist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wrist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wrist();

  // @@protoc_insertion_point(class_scope:demo.Glove_Client)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finger_;
  mutable int _finger_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wrist_;
  mutable int _wrist_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_Hand_2eproto::TableStruct;
  friend void ::protobuf_Hand_2eproto::InitDefaultsGlove_ClientImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Hand_Server

// repeated int32 pressure = 1 [packed = true];
inline int Hand_Server::pressure_size() const {
  return pressure_.size();
}
inline void Hand_Server::clear_pressure() {
  pressure_.Clear();
}
inline ::google::protobuf::int32 Hand_Server::pressure(int index) const {
  // @@protoc_insertion_point(field_get:demo.Hand_Server.pressure)
  return pressure_.Get(index);
}
inline void Hand_Server::set_pressure(int index, ::google::protobuf::int32 value) {
  pressure_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.Hand_Server.pressure)
}
inline void Hand_Server::add_pressure(::google::protobuf::int32 value) {
  pressure_.Add(value);
  // @@protoc_insertion_point(field_add:demo.Hand_Server.pressure)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Hand_Server::pressure() const {
  // @@protoc_insertion_point(field_list:demo.Hand_Server.pressure)
  return pressure_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Hand_Server::mutable_pressure() {
  // @@protoc_insertion_point(field_mutable_list:demo.Hand_Server.pressure)
  return &pressure_;
}

// -------------------------------------------------------------------

// Glove_Client

// repeated int32 finger = 1 [packed = true];
inline int Glove_Client::finger_size() const {
  return finger_.size();
}
inline void Glove_Client::clear_finger() {
  finger_.Clear();
}
inline ::google::protobuf::int32 Glove_Client::finger(int index) const {
  // @@protoc_insertion_point(field_get:demo.Glove_Client.finger)
  return finger_.Get(index);
}
inline void Glove_Client::set_finger(int index, ::google::protobuf::int32 value) {
  finger_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.Glove_Client.finger)
}
inline void Glove_Client::add_finger(::google::protobuf::int32 value) {
  finger_.Add(value);
  // @@protoc_insertion_point(field_add:demo.Glove_Client.finger)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Glove_Client::finger() const {
  // @@protoc_insertion_point(field_list:demo.Glove_Client.finger)
  return finger_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Glove_Client::mutable_finger() {
  // @@protoc_insertion_point(field_mutable_list:demo.Glove_Client.finger)
  return &finger_;
}

// repeated int32 wrist = 2 [packed = true];
inline int Glove_Client::wrist_size() const {
  return wrist_.size();
}
inline void Glove_Client::clear_wrist() {
  wrist_.Clear();
}
inline ::google::protobuf::int32 Glove_Client::wrist(int index) const {
  // @@protoc_insertion_point(field_get:demo.Glove_Client.wrist)
  return wrist_.Get(index);
}
inline void Glove_Client::set_wrist(int index, ::google::protobuf::int32 value) {
  wrist_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.Glove_Client.wrist)
}
inline void Glove_Client::add_wrist(::google::protobuf::int32 value) {
  wrist_.Add(value);
  // @@protoc_insertion_point(field_add:demo.Glove_Client.wrist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Glove_Client::wrist() const {
  // @@protoc_insertion_point(field_list:demo.Glove_Client.wrist)
  return wrist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Glove_Client::mutable_wrist() {
  // @@protoc_insertion_point(field_mutable_list:demo.Glove_Client.wrist)
  return &wrist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Hand_2eproto_INCLUDED
